纏めること


・reactそのもの
  ★★★完了★★★
  １）基本のコンセプト　react公式のreactの流儀のやつがいいかな？
    →jsx(htmlとの違い…イベントの属性名、条件付きrender)、props、props.children、state(setStateするときはstate用いるならコールバック)とか、
    →関数コンポーネントとクラスコンポーネント、
    →条件付きレンダリング
    →ライフサイクルメソッド
    →イベント処理
    →map()におけるkey
    →制御されたフォーム

  ★★★完了★★★
  ２）高度なコンセプト(個別に作成)
    →fragment
    →lazy(() => import())、suspence、error boundary
    →context
    →ref(とDOM)
    →高階コンポーネント


★★★完了★★★
・イミュータブルなstate更新のやつ

★★★完了★★★
・router
  →router使ってページ分けするようにしたい　switchも

★★★完了★★★
・reduxとかの状態管理方法
  →とりあえずqiitaのやつ纏める
  →reducer複数のやつ
  →fetchのやつ付ける

★★★完了★★★
・materialuiとか

★★★完了★★★
・スタイルの書き方ベスト
　シンプルなreactアプリであればcssをそのまま書いてcssモジュールとする
　materialuiではmakestyles()かな

★★★完了★★★
ツールキット
  ▶reducerのstateがネストしてる時に書き方楽に寝るみたい
  ▶他にもstoreのセットアップが楽になったりする
  configureStore,createSlice,createAsyncThunk,createEntityAdapterとある
  ツールキットはとりあえずこんな感じでとらえておけばおｋ
・re-ducksパターン
　オペレーション、セレクタ―
　→副作用(非同期処理とか)含むactionがオペレーション、stateのどれ読み出すか選択がセレクターみたいな感じ
　→dispatchとstate読出しに相当する？

★★あとはコメント書いておくだけのもの
・reduxのstoreでrouteを管理？？
　connected-react-routerつかったらできた。ただしver.4じゃないと挙動おかしい(笑)
・コンテナのcompose
　引数に渡された複数の関数を右から左に順に合成する
　渡される関数は各々一つだけ引数を受取ることができ
　その戻り値は左の関数の引数となる

★未完(ここからredux公式の件
storeのメソッドまとめ？
react redux 各フックも
todolistitem keyの所わからん
selectorに関してshallowEqualとReact.memo()とreselectのcreateSelector
actionのタイプ命名しっかり
フック使ってみる useSelector,useDispatch...

・とりあえずそんなに大規模なもの作らないのでducksパターンで
　stateフォルダつくってstoreとかいれてそのままducksパターンでそのフォルダ内に作る
・view関係は共通要素のcomponentsとページ呼出し単位のpagesくらいの分け方で
　componentsの中身はatomicデザインのざっくりした感じ。
　pagesの中身はcomponentsのつなぎ合わせとpage固有の要素
・assetsとかは？
　スタイルは基本cssインポートと、materialUiならmakestyleでいいけど
　assetsにいれるスタイルは共通のスタイル入れる？
　imgは基本importでいいはず。publicフォルダはfaviconとか？？

・firebase