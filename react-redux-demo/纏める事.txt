
★★★react-redux-demo関係！★★★

★★★このアプリの構成★★★
・とりあえずそんなに大規模なもの作らないのでducksパターンで
　stateフォルダつくってstoreとかいれてそのままducksパターンでそのフォルダ内に作る
・view関係は共通要素のcomponentsとページ呼出し単位のpagesくらいの分け方で
　componentsの中身はatomicデザインのざっくりした感じ。
　pagesの中身はcomponentsのつなぎ合わせとpage固有の要素
・assetsとかは？
　スタイルは基本cssインポートと、materialUiならmakestyleでいいけど
　assetsにいれるスタイルは共通のスタイル入れる？
　imgは基本importでいいはず。publicフォルダはfaviconとか？？

★★★メモ！★★★
・ツールキット
  ▶reducerのstateがネストしてる時に書き方楽に寝るみたい
  ▶他にもstoreのセットアップが楽になったりする
  configureStore,createSlice,createAsyncThunk,createEntityAdapterとある
  ツールキットはとりあえずこんな感じでとらえておけばおｋ？
  →何回も書くようなファイル(ボイラープレート)がだいぶ省略できそうで
  　便利そう。こんど使ってみるかな

・re-ducksパターン？？
　storeのディレクトリ構成として、
　src下に、action,reducer...のようにだけしたがボリュームが大きくなると大変なので、
　機能毎にファイルを分けて、action,reducer...の中身を分別したのがducksパターン
　(moduleﾌｫﾙﾀﾞ下にtodoSlice.js,filterSlice.jsみたいな)
　しかしこれも規模が大きくなるとつらいので、
　さらに機能別ファイル(slice)をさらに分割して関数の種類ごと(action,reducer,operation,selector,type)
　にすることになる
　オペレーション、セレクタ―
　→副作用(非同期処理とか)含むactionがオペレーション、stateのどれ読み出すか選択がセレクターみたいな感じ

・reduxのstoreでrouteを管理？？
　connected-react-routerつかったらできた。ただしver.4じゃないと挙動おかしい(笑)
　→storeでrouteの管理ができるようになる。
　これがないと<Link path="hoge"/>とか書く必要があるはずだが、
　storeで管理しているのでdispatch(push('/path'));
　のような感じで関数的に書くことができる。

・コンテナのcompose
　引数に渡された複数の関数を右から左に順に合成する
　渡される関数は各々一つだけ引数を受取ることができ
　その戻り値は左の関数の引数となる
　そもそもクラスコンポーネントにすることあまりないと思う

・actionのタイプ命名しっかり
　→アプリの主な機能として追跡したいstateを定義して初期stateを設計
　　initialState = {todos: {...}, filters: {...}}
　→stateの各プロパティについてのactionを設計する
　　{type: "TODOS/TODOADDED", payload: todoText}
　　{type: "FILTERS/FILTER_CHANGED", payload: filter}
　　typeは "'stateのプロパティ'/'具体的なアクション名'"とする
　→各actionに対するreducerを設計する
　　function todosReducer(state, action){}
　　function filtersReducer(state, action){}
　　関数名は'stateのプロパティ'+Reducerとなる
　　これらreducerはstore.jsとかでcombineされる
　→selectorを設計する(必要に応じて？createSelector見て考える)
　　関数名はselect+'選択したいstate'　かな

・react各フック
　useState
　　→クラスコンポーネントでの初期state設定、setState、state読み出しを便利に使える
　useEffect
　　→クラスコンポーネントでのcomponentDidmount,componentWillunmountとかの処理を関数コンポーネントで使える上に一気にかける
　useCallback
　　→コールバック関数を何度も登録せずに済むやつ？　★★★未完★★★

・redux各フック
　以下フックをコンポーネントで使うにはコンポーネントを<Provider store={store}></Provider>で囲う
　useDispatch
　　→reactコンポーネント内でstore.dispatchが使えるようにする
　useSelector
　　→reactコンポーネント内でstoreの値を選択して取り出すとともに、store.subscribeみたいなことをしてくれる
　　　…actionがdispatchされる度にselectorを呼出し、結果が前回と異なれば該当コンポーネントの再レンダリング
　　　を行うが、、、厳密な比較演算===なのでdispatch時、値は同じでも新しい配列とかになると前回と違う参照として判定してしまう
　　　これの対策として他のコンポーネントから変更される可能性のあるstateは直接selectorで読み取らずに
　　　そのstateのプロパティにID等のプリミティブ型を持たせ、それを読み取り、コンポーネント内で使用すれば、値のみの比較なので問題ない
　　　しかしそれでもどこかで該当のオブジェクトや配列を読み出さなければならない事が多いと思うので
　　　useSelector()の第二引数にshallowEqualをわたしてやると、オブジェクトや配列の中の値を比較するようになる。
　　　createSelectorについては
　　　　dispatchがあるたびに無駄な再レンダリングはshallowEqualで防げるが、インラインでuseselectorに
　　　　渡す関数を書いているとき、selector関数の再計算は行われしまう。再計算を防ぎ、なおかつ再レンダリングをも防ぐもの
　　　　基本createSelecotr使っとけば問題ないが、小規模ならuseSelectorにshallowEqualでも可

・storeのメソッドまとめ？
　storeのメソッドには以下がある。createStoreしてその戻り値で使うことができるが、
　大体フックを呼び出して使うことになる。
　getState()
　　→storeを介しstateそのものにアクセスできる。普通はuseSelector使う
　dispatch(action)
　　→actionをreducerに送ってstateの更新をさせる。普通はuseDispatch使う
　subscribe(listener)
　　→dispatch時に一緒に行うリスナーコールバックを登録。あまり使わない。多分middleWare的な感じでOK
　unsubscribe※subscribeの戻り値
　　→リスナー登録の解除

・非同期処理のやつとモックapiついでに
　→モックAPIはとりあえずjson-server入れてみた
　　npx json-server -w db.jsonで起動する
　　db.jsonに初期dbを入れて、json-server.jsonにオプション設定できる

・storeには配列使わないでオブジェクトとか・・・)
　→stateの正規化といい、下記の要件がある
　　各データのコピーが一つだけである
　　IDで直接アイテムを検索できる方法でアイテムを保存する
　　アイテム全体をコピーするのではなくIDによって他のアイテムを参照する
　　つまりtodosの場合
    initialState = {
      entities: {
        ...state.entities,
        [todo.id]: {newTodo},    
      }
    }
　　みたいな感じで配列でエンティティを保持せずにオブジェクトでキーがIDになるように保存することとなる。
　　これのtodosを取り出すセレクタ―は
    const selectTodos = createSelector(
      state => state.entities,
      entities => Object.values(entities) //オブジェクトの値をfor...inのように展開できる
    )
　　となる

★未完
・標準的なreduxのパターン
　・非同期処理のリクエスト状態とか、コンポーネント側でもpromiseを返すサンク関数をdispatch
　　したときにはasync,await使えるとかは完了　★★★あとmemoのみ作成する★★★

・開発モードだとlogとかしないようにするやつは・・・？
　process.env.NODE_ENV === 'development'
　にdevelopmentかproductのような値が入っているのでこれをif文で見て処理を分岐するといいかも
　★★★あとmemoのみ作成する★★★

・createreactの公式読む

・firebase
