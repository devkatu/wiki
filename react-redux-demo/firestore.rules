rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  // ここまでの記述はお約束
  // firestoreのルールだよ、の宣言みたいなもん
  // あとはこの括弧内にドキュメントを指定し、それに対する
  // ルールを一つ一つ条件付きで許可する形で書いていく(ホワイトリスト)

    // ★ドキュメントの指定
    // match /コレクション/ドキュメント{...}
    // のように"ドキュメント"を指定する
    // 直接文字列を指定してもいいし、{xxx}のようなワイルドカード指定もできる
    match /todos/{todosId} {

      allow read, write: if true;

      // ★ルールの設定
      // allow 読み書きオペレーション: if 条件式;
      // のような形で書いていく。
      // オペレーションの種類は
      // read
      //    get
      //    list
      // write
      //    create
      //    update
      //    delete
      // とあり、 , でまとめて書くことができる。

      // ドキュメントの中にさらにコレクションをネスト(サブコレクション)しているときは
      // このようなルールになる。場合によってはルールの記述はネストせずに直接全パスを
      // 記述してもOK。(match /todos/{todosId}/subcollection/{subId} のような感じ)
      // match /subcollection/{subId}{
      //   allow read;
      // }
      
      // ルールが深い階層に適用されるようにするには、再帰ワイルドカード構文{name=**}を使う
      // match /subcollection/{document=**}{
      //    この中でのdocument変数の値は対象のドキュメントのパスと一致するものになる
      //    /subcollection/landmark/tower のドキュメントのルールを設定するときには
      //    document変数にはsubcollection/landmark/towerが入っている
      // }
    }
    match /users/{userId} {
      // usersコレクションに含まれている{userId}をIDとするドキュメントと、
      // 認証情報のuid(データ要求しているユーザーのID…サインアップしたときとかに帰ってくる値にも含まれていると思う)が一致する時のみ許可
      // ※request.authへ数はでーたを要求しているクライアントの認証情報が入る
      // allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      
      // ログインしていれば許可
      // allow create: if request.auth != null;


      // resource.dataにはすべてのドキュメントに格納されているフィールドと値が入る
      // requset.resourceには更新しようしている値が入りその整合性チェックのようなことをできる
      // allow read: if resource.data.visibility == 'public';
      // allow update:if request.resorce.data.population > 0 
      //               && requset.resource.data.name == resource.data.name;


      allow get;
      allow list;
      allow create;
      allow update;
      allow delete;
      
    }
    match /order/{orderId} {
      allow read;
      allow write;
    }
  }
}