・firebase導入方法ざっくり
　・ダッシュボードでの作業
　　firebaseコンソール(ダッシュボードみたいなの)からプロジェクトを作成する
　　ダッシュボードからreact等のウェブアプリに対して作成したfirebaseプロジェクトを追加する
　　プロジェクトの設定からリソースロケーションを設定する
　　　asia-northeast1のリージョンにしておく
　　databaseについて本番環境で開始を行う。
　・コンソールからの作業
　　・npm install -g firebase-tools
　　　これをインストールするとfirebaseのCLIが使えるようになる
　　・npm install -s firebase
　　　アプリでfirebaseを使うならこれをインストールしておく
　　　firebaseをimportしてstorageやらdatabaseやらが使えるよになる
　　・アプリのディレクトリから firebase login を行い作成したプロジェクトにログインする
　　・firebase init で初期化を行う
　　　使用サービスをスペースキーで選択する。firestoreとかfunctionsとかhostingとかstorageとか選べる
　　　使用するプロジェクトを選択する。既存のプロジェクトや新規プロジェクトとか選べる
　　　hostingの選択ではbuildディレクトリを選択しておく
　　　あとはほとんどデフォルト
　　・npm run build してから firebase deploy をするとhostやらrulesなんやらがfirebaseへデプロイされる
　　　この後はアプリ作ればbuildしてdeploy、rules変えたりしてもdeployする必要あり。
　　・firebase deployについて
　　　以下ルールのみデプロイするオプションあり
　　　--only hosting
　　　--only database
　　　--only storage
　　　--only firestore
　　　--only firestore:rules
　　　--only firestore:indexes
　　　--only functions

・firebaseをinitすると
　・functionsフォルダ
　　サーバー側での処理を記述するファイル。
　・firestore.rulesとかsotorage.rulesとかについて
　　firestoreやstorageとかのパーミッションを設定するファイル。
　　変更したらfirebase deployする必要がある。

・firebaseを使いやすいようにするために自分で作るもの
　・src>firebase>config.js
　　firebaseの設定を行うファイル。APIkeyとか入ってる。
　　firebaseコンソールの設定→Firebase SDK Snippet→構成から丸コピーしてこのファイルに張り付けている。
　・src>firebase>index.js
　　上のconfig.jsを読込んでinitislizeApp(firebaseConfig)したり
　　使用するFirebaseサービスを読込んで使いやすくエクスポートしてあげたりする

・authenticationについて
　・まずはコンソールから、signin方法を選択して有効にする。

・dbのメソッド色々
　db.collection('todos').orderBy('timestamp', 'asc').get()
　　→firestore上のtodosコレクションからtimestampのフィールドについて、
　　ascなら昇順、descなら降順でドキュメントを取得する
　await db.collection('todos').doc(id).set(initTodo).catch(e => { throw new Error(e) });
　　→firestore上のtodosコレクションのid指定したドキュメントにinitTodoを登録する
　db.collection('todos').doc(id).update(sendTodo)
　　→firestore上のtodosコレクションのid指定したドキュメントにsendTodoを更新する
　db.collection('todos').doc(id).delete()
　　→firestore上のtodosコレクションのid指定したドキュメントを削除する

・storageのメソッド色々
　const uploadTask = storage.ref('images').child(fileName).put(blob);
　uploadTask.then( () => {
    uploadTasksnapshot.ref.getDownloadURL().then((downloadURL) => {

    })
})
　→以下のメソッドでstorage上の/imagesディレクトリに、blob化したファイルを、fileNameという名前でアップロードして
　そのアップロードしたファイルのダウンロード用URLを取得できる


★未完
auth関係について
　サインアップ、サインイン、サインアウト、リッスン

rulesの書き方
　とりあえずはfirestore.rulesの書き方について
rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        // ここにルール（ホワイトリスト形式）を書いていく
        // →各オペレーションについて一つ一つ条件付で許可していく形
        // 言い換えればルールを書く毎にセキュリティに穴を開けることとなる
        match /<対象のコレクション・ドキュメントへのパス> {
            // ここにルールを記述する
            allow <許可する読み書きのオペレーション>: if <許可する条件>;
        }
    }
}

　下の箇所はおまじないで必須(Cloud Firestoreのルートを表しているみたい)
rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        // ここにルール（ホワイトリスト形式）を書いていく
    }
}

　ルールの書き方は
　read(get, list)
　write(create, update, delete)
　の各々(オペレーションっていう)について記述していく。

useEffectについて
useCallbackも詳細
action,selector等の命名規則ちゃんとする
決済の方法
